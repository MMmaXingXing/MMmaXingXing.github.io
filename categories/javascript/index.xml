<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Astar Blog</title>
    <link>https://mmmaxingxing.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on Astar Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Apr 2019 14:24:37 +0800</lastBuildDate>
    
	<atom:link href="https://mmmaxingxing.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>imageUp To base64</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/vue/image_up_base64/</link>
      <pubDate>Tue, 16 Apr 2019 14:24:37 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/vue/image_up_base64/</guid>
      <description>一、本地上传图片转为base64 1 2 3 4 5 6 7 8 9 10 11 //假设已经拿到了 图片的file 则 var reader = new FileReader(); var imgUrlBase64; if (file) { //将文件以Data URL形式读</description>
    </item>
    
    <item>
      <title>Event Loop 机制</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/eventloop/</link>
      <pubDate>Fri, 12 Apr 2019 16:52:29 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/eventloop/</guid>
      <description>Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。 JavaScript语言就采用这种机制，来解决单线程运行代表的一些问题。 要想理解Ev</description>
    </item>
    
    <item>
      <title>Call&amp;&amp;Apply谁的效率高</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/callapply/</link>
      <pubDate>Thu, 04 Apr 2019 12:54:18 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/callapply/</guid>
      <description>Call 允许为不同的对象分配和调用属于一个对象的函数/方法。 call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。 cal</description>
    </item>
    
    <item>
      <title>前端技术栈</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</link>
      <pubDate>Wed, 03 Apr 2019 16:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</guid>
      <description>前端必备 正常技术栈 ES6 [ES7] TypeScript [Vue]() [React]() [Angular]() [小程序]() 混合app开发 [Ionic]() [ReactNative]() [Crodova+vue]() [Crodova+react]() [weex]() [Flutter]() 后台全栈 [nodejs]() [Express/Koa]() [tgg.js]() [Mongodb]() [MySql]() [Redis]() 电脑软件 [Electron]() 跨平台混合软件开发 其他 [Google插件</description>
    </item>
    
    <item>
      <title>javascript细碎tip</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/javascript_small/</link>
      <pubDate>Wed, 03 Apr 2019 14:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/javascript_small/</guid>
      <description>debugger() 断点调试 console.dir() 打印出元素具体信息 console.error() 打印出错误信息</description>
    </item>
    
    <item>
      <title>For of 到 Generator</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/for_of%E5%88%B0generator/</link>
      <pubDate>Wed, 03 Apr 2019 13:28:13 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/for_of%E5%88%B0generator/</guid>
      <description>For of 是什么 ES6中引入的for of循环可以用来替代 for in 和 forEach(),并支持新的迭代协议,允许你遍历 Array、Maps(映射)、St</description>
    </item>
    
    <item>
      <title>利用Array From 实现分页骚操作</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/paging/</link>
      <pubDate>Fri, 29 Mar 2019 15:24:51 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/paging/</guid>
      <description>Array.form 是什么 array用于将两类对象转换为真正的数组, 即:类似数组的对象(array-likeobject) 和可遍历（iterable）的对象 包</description>
    </item>
    
    <item>
      <title>promise async await</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/async_await_promise/</link>
      <pubDate>Mon, 04 Mar 2019 17:29:17 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/async_await_promise/</guid>
      <description>Promise promise 是异步编程的一种解决方案，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个一步操作）的结果。从语法上来说，Promis</description>
    </item>
    
  </channel>
</rss>