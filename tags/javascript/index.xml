<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on Astar Blog</title>
    <link>https://mmmaxingxing.github.io/tags/javascript/</link>
    <description>Recent content in javascript on Astar Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Jun 2019 18:02:44 +0800</lastBuildDate>
    
	<atom:link href="https://mmmaxingxing.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建一个原生属性并且模拟触发事件</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/dom/creat_a_click/</link>
      <pubDate>Tue, 11 Jun 2019 18:02:44 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/dom/creat_a_click/</guid>
      <description>&lt;h3 id=&#34;创建一个a标签并触发其事件&#34;&gt;创建一个a标签并触发其事件&lt;/h3&gt;

&lt;p&gt;有个项目需求，需要下载一个文件时名称不乱码显示，前段解决方案，使用a标签新增download 字段，由于需要模拟a标签，以下以做记录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vue nextTicket 源码分析</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/01-vue-soundcode-nextticket/</link>
      <pubDate>Tue, 07 May 2019 15:39:50 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/01-vue-soundcode-nextticket/</guid>
      <description>nextTicket源码构成 1、能力检测 2、延时调用 3、原理是利用js同步函数执行完毕后才会执行进入异步加载流的规则 全部源码 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>Vue Mixins</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/01-vue-grammer-mixins/</link>
      <pubDate>Tue, 07 May 2019 15:31:38 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/01-vue-grammer-mixins/</guid>
      <description>一、Mixins 把vue 的方法拉出来写了,相同的覆盖，不同的打包进去。</description>
    </item>
    
    <item>
      <title>jsvascript中的宏任务和微任务</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/macro_micro_task/</link>
      <pubDate>Thu, 18 Apr 2019 17:58:24 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/macro_micro_task/</guid>
      <description>javascript运行模式 javascript是一门单线程语言,我们常见理解是从上向下一行一行运行，但是，事实上同步单线程是不能满足我们常</description>
    </item>
    
    <item>
      <title>imageUp To base64</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/image_up_base64/</link>
      <pubDate>Tue, 16 Apr 2019 14:24:37 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/image_up_base64/</guid>
      <description>一、本地上传图片转为base64 1 2 3 4 5 6 7 8 9 10 //假设已经拿到了 图片的file 则 var reader = new FileReader(); var imgUrlBase64; if (file) { //将文件以Data URL形式读入</description>
    </item>
    
    <item>
      <title>Event Loop 机制</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/eventloop/</link>
      <pubDate>Fri, 12 Apr 2019 16:52:29 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/eventloop/</guid>
      <description>Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。 JavaScript语言就采用这种机制，来解决单线程运行代表的一些问题。 要想理解Ev</description>
    </item>
    
    <item>
      <title>React框架学习01</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/react/react-study-01/</link>
      <pubDate>Fri, 12 Apr 2019 11:03:03 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/react/react-study-01/</guid>
      <description>创建一个react项目 1 npx create-react-app my-app 创建一个react模块 方法一：https://codepen.io/gaearon/pen/YGYmEG?ed</description>
    </item>
    
    <item>
      <title>npx</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/react/npx/</link>
      <pubDate>Fri, 12 Apr 2019 11:03:03 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/react/npx/</guid>
      <description>npx 今天看react安装环境中有一句 npx create-react-app my-app,没有见过npx，查了查资料 聊以记录; npx 是 npm v5.2.0 引入的一条命令，目的是为了提升开发者使用包内</description>
    </item>
    
    <item>
      <title>Call&amp;&amp;Apply谁的效率高</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/callapply/</link>
      <pubDate>Thu, 04 Apr 2019 12:54:18 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/callapply/</guid>
      <description>Call 允许为不同的对象分配和调用属于一个对象的函数/方法。 call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。 cal</description>
    </item>
    
    <item>
      <title>前端技术栈</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</link>
      <pubDate>Wed, 03 Apr 2019 16:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</guid>
      <description>前端必备 正常技术栈 ES6 [ES7] TypeScript [Vue]() [React]() [Angular]() [小程序]() 混合app开发 [Ionic]() [ReactNative]() [Crodova+vue]() [Crodova+react]() [weex]() [Flutter]() 后台全栈 [nodejs]() [Express/Koa]() [tgg.js]() [Mongodb]() [MySql]() [Redis]() 电脑软件 [Electron]() 跨平台混合软件开发 其他 [Google插件</description>
    </item>
    
    <item>
      <title>javascript细碎tip</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/javascript_small/</link>
      <pubDate>Wed, 03 Apr 2019 14:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/javascript_small/</guid>
      <description>debugger() 断点调试 console.dir() 打印出元素具体信息 console.error() 打印出错误信息</description>
    </item>
    
    <item>
      <title>For of 到 Generator</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/for_of%E5%88%B0generator/</link>
      <pubDate>Wed, 03 Apr 2019 13:28:13 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/for_of%E5%88%B0generator/</guid>
      <description>For of 是什么 ES6中引入的for of循环可以用来替代 for in 和 forEach(),并支持新的迭代协议,允许你遍历 Array、Maps(映射)、St</description>
    </item>
    
    <item>
      <title>利用Array From 实现分页骚操作</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/paging/</link>
      <pubDate>Fri, 29 Mar 2019 15:24:51 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/paging/</guid>
      <description>Array.form 是什么 array用于将两类对象转换为真正的数组, 即:类似数组的对象(array-likeobject) 和可遍历（iterable）的对象 包</description>
    </item>
    
    <item>
      <title>vue3.0&amp;&amp;vue2.0项目安装以及初始化</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/vue3.0_installvue2.0/</link>
      <pubDate>Fri, 22 Mar 2019 23:13:46 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/vue3.0_installvue2.0/</guid>
      <description>Vue3.0项目安装以及介绍 1 2 3 4 5 //安装 npm install -g @vue/cli //安装vue2.0(兼容) npm install -g @vue/cli-init 变化更新 部分命令发生了变化 删除了vue list 创建项目 vue</description>
    </item>
    
    <item>
      <title>Vue常用操作整理</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/vue_useful_expressions/</link>
      <pubDate>Wed, 20 Mar 2019 23:13:46 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/vue_useful_expressions/</guid>
      <description>1、创建全局过滤器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //main.js 中 Object.keys(allFilter).forEach(key =&amp;gt; { Vue.filter(key,allFilter[key]) }) //base_filter中 //获取yyyy-mm-dd类型时间 let getDate = value =&amp;gt; {</description>
    </item>
    
    <item>
      <title>斐波拉契实现</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/javascript/arithmetic/fibonacci/</link>
      <pubDate>Tue, 19 Mar 2019 22:54:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/javascript/arithmetic/fibonacci/</guid>
      <description>斐波拉契 斐波那契数列 1, 1, 2,3,5,8,13,21….. 使用公式f( n ) = f(n-1)+f(n-2),结束条件f(2) =1, f(1) = 1 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>webpack配置使用小技巧</title>
      <link>https://mmmaxingxing.github.io/post/technology/plugin/webpak%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 18 Mar 2019 22:22:27 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/plugin/webpak%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>webpack 之 dev.env.js &amp;amp;&amp;amp; prod.env.js 1 2 3 4 5 6 7 8 9 10 //dev.env.js //开发版本 &amp;#39;use strict&amp;#39; const merge = require(&amp;#39;webpack-merge&amp;#39;) const prodEnv = require(&amp;#39;./prod.env&amp;#39;) module.exports = merge(prodEnv, { NODE_ENV: &amp;#39;&amp;#34;development&amp;#34;&amp;#39;, BASE_API: &amp;#39;&amp;#34;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&amp;#34;&amp;#39;, }) 1 2 3 4 5 6 7 //prod.env.js //线上 &amp;#39;use strict&amp;#39; module.exports = { NODE_ENV: &amp;#39;&amp;#34;production&amp;#34;&amp;#39;, BASE_API: &amp;#39;&amp;#34;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&amp;#34;&amp;#39;, } 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>diff算法</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/javascript/arithmetic/diff-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 17 Mar 2019 23:05:51 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/javascript/arithmetic/diff-%E7%AE%97%E6%B3%95/</guid>
      <description>一、虚拟dom 众所周知，直接使用真实dom对性能的耗费是非常巨大的，因为它会造成浏览器频繁的重绘，浏览器中渲染一个页面所需要的标准实在是太多</description>
    </item>
    
    <item>
      <title>vue elementui 使用记录 图片上传</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/vue/elementuiupload/</link>
      <pubDate>Fri, 15 Mar 2019 23:33:08 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/vue/elementuiupload/</guid>
      <description>一、前端做图片上传展示 1 2 let _URL = window.URL || window.webkitURL; self.form.imageLogo = _URL.createObjectURL(file); 二、elementui 判断图片大小 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const isSize = new Promise(function(resolve, reject) { let width =</description>
    </item>
    
    <item>
      <title>promise async await</title>
      <link>https://mmmaxingxing.github.io/post/cours/front/async_await_promise/</link>
      <pubDate>Mon, 04 Mar 2019 17:29:17 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/front/async_await_promise/</guid>
      <description>Promise promise 是异步编程的一种解决方案，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个一步操作）的结果。从语法上来说，Promis</description>
    </item>
    
  </channel>
</rss>