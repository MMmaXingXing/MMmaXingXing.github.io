<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Astar Blog</title>
    <link>https://mmmaxingxing.github.io/</link>
    <description>Recent content on Astar Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 18 Apr 2019 17:58:24 +0800</lastBuildDate>
    
        <atom:link href="https://mmmaxingxing.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jsvascript中的宏任务和微任务</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/macro_micro_task/</link>
      <pubDate>Thu, 18 Apr 2019 17:58:24 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/macro_micro_task/</guid>
      
        <description></description>
      
    </item>
    
    <item>
      <title>MD语法整理</title>
      <link>https://mmmaxingxing.github.io/post/cours/markdown/</link>
      <pubDate>Thu, 18 Apr 2019 11:10:59 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/markdown/</guid>
      
        <description>

&lt;h3 id=&#34;md语法整理&#34;&gt;MD语法整理&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;标题： #XXX    最多六级标题

列表：  无序 ： * 、+、- 

              有序：1.     2.    3.  

引用： &amp;gt;这是引用文本

链接： [链接名称](http://www.baidu.com)

图片 :   ![ 图片名称 ]( 图片地址 )

粗体： **AAA**                         斜体：*AAA*

表格：

|  Tables  |    AAA   |   BBB   |

| ---------- | :----------:  | ----------: |

|   aaa    |  bbbbbb   |  cccccc |

 

代码：     ·   代码内容  ·    tab 缩进

//```
//代码块
//```&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>php4.17小记</title>
      <link>https://mmmaxingxing.github.io/post/cours/php/php_4.17/</link>
      <pubDate>Wed, 17 Apr 2019 13:47:35 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/php/php_4.17/</guid>
      
        <description>

&lt;h3 id=&#34;页面跳转&#34;&gt;页面跳转&lt;/h3&gt;

&lt;h4 id=&#34;header&#34;&gt;Header&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;? 
if (isset($url)) 
{ 
Header(&amp;#34;HTTP/1.1 303 See Other&amp;#34;); 
Header(&amp;#34;Location: $url&amp;#34;); 
exit; //from www.w3sky.com 
} 
?&amp;gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;location&#34;&gt;location&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;? 
$url=&amp;#34;http://www.jb51.net&amp;#34;; 
echo &amp;#34;&amp;lt;!--&amp;lt;scrīpt LANGUAGE=&amp;#34;Javascrīpt&amp;#34;&amp;gt;&amp;#34;; 
echo &amp;#34;location.href=&amp;#39;$url&amp;#39;&amp;#34;; 
echo &amp;#34;&amp;lt;/scrīpt&amp;gt;--&amp;gt;&amp;#34;; 
?&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;meta&#34;&gt;meta&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;echo &amp;#34;&amp;lt; meta http-equiv=\\&amp;#34;Refresh\\&amp;#34; content=\\&amp;#34;秒数; url=跳转的文件或地址\\&amp;#34; &amp;gt; &amp;#34;; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>imageUp To base64</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/vue/image_up_base64/</link>
      <pubDate>Tue, 16 Apr 2019 14:24:37 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/vue/image_up_base64/</guid>
      
        <description>

&lt;h3 id=&#34;一-本地上传图片转为base64&#34;&gt;一、本地上传图片转为base64&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;//假设已经拿到了 图片的file 则

        var reader = new FileReader();
        var imgUrlBase64;
        if (file) {
            //将文件以Data URL形式读入页面  
            imgUrlBase64 = reader.readAsDataURL(file);
            reader.onload = function (e) {
              console.log(e.currentTarget.result);
            }
         }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;二-将本项目中的图片转为base64&#34;&gt;二、将本项目中的图片转为base64&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;    function(){
       var url = &amp;#34;static/img/js1.jpg&amp;#34;;//这是站内的一张图片资源，采用的相对路径
       convertImgToBase64(url, function(base64Img){
        //转化后的base64
        alert(base64Img);
       });             
    }

    //实现将项目的图片转化成base64
    function convertImgToBase64(url, callback, outputFormat){
       var canvas = document.createElement(&amp;#39;CANVAS&amp;#39;),
    　　ctx = canvas.getContext(&amp;#39;2d&amp;#39;),
    　　img = new Image;
    　　img.crossOrigin = &amp;#39;Anonymous&amp;#39;;
    　　img.onload = function(){
        　　canvas.height = img.height;
        　　canvas.width = img.width;
        　　ctx.drawImage(img,0,0);
        　　var dataURL = canvas.toDataURL(outputFormat || &amp;#39;image/png&amp;#39;);
        　　callback.call(this, dataURL);
        　　canvas = null; 
        };
    　　img.src = url;
    } &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;三-将网络图片资源转化为base64&#34;&gt;三、将网络图片资源转化为base64&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-script&#34; data-lang=&#34;script&#34;&gt;function(){
    　　 //这是网上的一张图片链接
    　　 var url=&amp;#34;http://p1.pstatp.com/large/435d000085555bd8de10&amp;#34;;
        getBase64(url)
            .then(function(base64){
                  console.log(base64);//处理成功打印在控制台
            },function(err){
                  console.log(err);//打印异常信息
            });                        
    }    

    //传入图片路径，返回base64
    function getBase64(img){
        function getBase64Image(img,width,height) {//width、height调用时传入具体像素值，控制大小 ,不传则默认图像大小
          var canvas = document.createElement(&amp;#34;canvas&amp;#34;);
          canvas.width = width ? width : img.width;
          canvas.height = height ? height : img.height;
 
          var ctx = canvas.getContext(&amp;#34;2d&amp;#34;);
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          var dataURL = canvas.toDataURL();
          return dataURL;
        }
        var image = new Image();
        image.crossOrigin = &amp;#39;&amp;#39;;
        image.src = img;
        var deferred=$.Deferred();
        if(img){
          image.onload =function (){
            deferred.resolve(getBase64Image(image));//将base64传给done上传处理
          }
          return deferred.promise();//问题要让onload完成后再return sessionStorage[&amp;#39;imgTest&amp;#39;]
        }
      }&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;reader.result.substring(reader.result.indexOf(&amp;#34;,&amp;#34;) + 1) //将base64截取掉标识

//判断base64资源大小
//reader.result.length 资源大小

var AllowImgFileSize = 2100000;    //上传图片最大值(单位字节)（ 2 M = 2097152 B ）
    if (AllowImgFileSize != 0 &amp;amp;&amp;amp; AllowImgFileSize &amp;lt; reader.result.length) {
      alert( &amp;#39;上传失败，请上传不大于2M的图片！&amp;#39;);
      return;
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Event Loop 机制</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/eventloop/</link>
      <pubDate>Fri, 12 Apr 2019 16:52:29 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/eventloop/</guid>
      
        <description>&lt;p&gt;Event Loop 是一个很重要的概念，指的是计算机系统的一种运行机制。&lt;/p&gt;

&lt;p&gt;JavaScript语言就采用这种机制，来解决单线程运行代表的一些问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mmmaxingxing.github.io/image/javascript/eventloop/loop_base.png&#34; alt=&#34;loop示例&#34; /&gt;&lt;/p&gt;

&lt;p&gt;要想理解Event Loop,就要从程序运行的模式讲起。运行以后的程序叫&amp;rdquo;进程&amp;rdquo;(process),一般情况下,一个进程一次只能执行一个任务。&lt;/p&gt;

&lt;p&gt;如果有很多个任务需要执行，不外乎三种解决办法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;(1)、排队。因为一个进程一次只能执行一个任务，只好等前面任务
(2)、新建进程。使用fork命令，为每个任务新建一个进程。
(3)、新建线程。因为进程太耗费资源，所以如今的程序往往允许一个进程包含多个线程，由线程去完成任务。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html&#34;&gt;进程与线程相关知识&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以javascript为例，它是一种单线程语言,所有任务都在一个线程上完成，即采用上面的第一种方法，一旦遇到大量任务或者遇到一个耗时的任务，网页就会出现&amp;rdquo;假死&amp;rdquo;,因为javascript停不下来，也就无法响应用户的行为。&lt;/p&gt;

&lt;p&gt;为什么javascript是单线程呢？难道不能实现为多线程么？&lt;/p&gt;

&lt;p&gt;这跟历史有关系，jsvascript从诞生起就是单线程，原因大概是不想让浏览器变的太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种脚本语言来说，这就太复杂了，后来就约定俗成，javascript是一种单线程语言（Worker API 可以实现多线程, 但javascript本身是单线程的）。&lt;/p&gt;

&lt;p&gt;如果某个任务很耗时，比如高（I/O 输入输出操作），那么线程的运行如下：
&lt;img src=&#34;https://mmmaxingxing.github.io/image/javascript/eventloop/a_lot_of_io.png&#34; alt=&#34;IO示例&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图Io绿色的是运行时间,红色部分是等待时间。可以看到，由于I/O操作很慢，所以这个线程的大部分时间都在空等I/O操作返回结果。这种运行方式称为&amp;rdquo;同步模式&amp;rdquo;(synchronous I/O)或&amp;rdquo;堵塞模式&amp;rdquo;(blocking I/O)。&lt;/p&gt;

&lt;p&gt;如果采用多线程，同时运行多个任务，那可能就是下面这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mmmaxingxing.github.io/image/javascript/eventloop/sync.png&#34; alt=&#34;多线程示例&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;gt; 大概简介:
&amp;gt; CPU -&amp;gt; 单个CPU一次只能运行一个任务
&amp;gt; 进程好比车间，CPU所处理的单个任务；任一时刻，CPU处理一个进程
&amp;gt; 一个车间有很多工人协同，线程好比车间工人，一个进程可以有多个线程，进程内享有空间共享。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上图表明，多线程不仅占用多倍的系统资源，也闲置多倍的资源，这显然不合理。&lt;/p&gt;

&lt;p&gt;Event Loop就是为了解决这个问题而提出的。Wikipedia这样定义：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Event Loop是一个程序结构，用于等待和发送消息和事件。(a programing construct that waits for and dispatches events or messages in a program .)&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单来说，就是程序中设置两个线程:一个负责程序本身的运行，称为&amp;rdquo;主线程&amp;rdquo;; 另一个负责主线程与其他进程(主要是各种 I/O操作)的通信，被称为&amp;rdquo;Event Loop线程&amp;rdquo;（可以译为&amp;rdquo;消息线程&amp;rdquo;）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mmmaxingxing.github.io/image/javascript/eventloop/event_loop.png&#34; alt=&#34;Event Loop&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图主线程的绿色部分，还是表示运行时间，而橙色部分表示空闲时间。每当遇到 I/O的时候，主线程就让Event Loop线程取通知相应的I/O程序，然后接着向后运行，所以不存在红色的等待时间。等到I/O程序完成操作，Event Loop线程再把结果返回主线程。主线程就调用事先设定的回调函数，完成整个任务。&lt;/p&gt;

&lt;p&gt;可以看到，由于多出了橙色的空闲时间，所以主线程得以运行更多的任务，这就提高了效率。这种方式称为&amp;rdquo;异步模式&amp;rdquo;（asynchronous I/O）或&amp;rdquo;非阻塞模式&amp;rdquo;（non-blocking mode）。&lt;/p&gt;

&lt;p&gt;这正是javascript语言的运行方式。单线程模型虽然对Javascript构成了很大的限制，但也因此使它具备了其他语言不具备的优势。如果部署的好，Javascript程序是不会出现堵塞的，这就是为什么node.js平台可以用很少的资源，应付大流量访问的原因。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;转载自 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2013/10/event_loop.html&#34;&gt;http://www.ruanyifeng.com/blog/2013/10/event_loop.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>npx</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/react/npx/</link>
      <pubDate>Fri, 12 Apr 2019 11:03:03 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/react/npx/</guid>
      
        <description>

&lt;h3 id=&#34;npx&#34;&gt;npx&lt;/h3&gt;

&lt;p&gt;今天看react安装环境中有一句 npx create-react-app my-app,没有见过npx，查了查资料 聊以记录;&lt;/p&gt;

&lt;p&gt;npx 是 npm v5.2.0 引入的一条命令，目的是为了提升开发者使用包内提供命令行工具的体验。&lt;/p&gt;

&lt;h4 id=&#34;避免全局安装模块&#34;&gt;避免全局安装模块&lt;/h4&gt;

&lt;h5 id=&#34;eg-使用create-react-app创建项目&#34;&gt;eg：使用create-react-app创建项目&lt;/h5&gt;

&lt;p&gt;老方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm install -g create-react-app
create-react-app my-app&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;npx 方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx create-react-app my-app

//也可以指定版本
npx uglify-js@3.1.0 main.js -o ./dist/main.js&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;这条命令会临时安装create-react-app包，命令完成后会删掉，不会出现在global中。&lt;/p&gt;

&lt;h4 id=&#34;支持运行远程仓库中的可执行文件&#34;&gt;支持运行远程仓库中的可执行文件&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;执行 Gist 代码
npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32

//执行可执行文件
npx github:picco/cowsay hello&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注意，远程代码必须是一个模块，即必须包含package.json和入口脚本。&lt;/p&gt;

&lt;p&gt;使用http-server开启一个服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx http-server //第一次有点慢&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;指定node版本来运行 npm scripts&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx -p node@8 npm run build&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;调用项目安装的模块&#34;&gt;调用项目安装的模块&lt;/h4&gt;

&lt;p&gt;npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了webpack。&lt;/p&gt;

&lt;p&gt;举例来说，之前我们可能会写这样的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm i -D webpack
./node_modules/.bin/webpack -v
// webpack -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;bash版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm i -D webpack
`npm bin`/webpack -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;npx&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm i -D webpack
npx webpack -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;也就是说 npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你安装！&lt;/p&gt;

&lt;h5 id=&#34;no-install-参数和-ignore-existing-参数&#34;&gt;&amp;ndash;no-install 参数和&amp;ndash;ignore-existing 参数&lt;/h5&gt;

&lt;p&gt;如果想让 npx 强制使用本地模块，不下载远程模块，可以使用&amp;ndash;no-install参数。如果本地不存在该模块，就会报错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx --no-install http-server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用&amp;ndash;ignore-existing参数。比如，本地已经全局安装了create-react-app，但还是想使用远程模块，就用这个参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx --ignore-existing create-react-app my-react-app&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;使用不同版本的node&#34;&gt;使用不同版本的node&lt;/h4&gt;

&lt;p&gt;利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 node 模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;$ npx node@0.12.8 -v
v0.12.8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。&lt;/p&gt;

&lt;p&gt;某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。&lt;/p&gt;

&lt;h5 id=&#34;p参数&#34;&gt;-p参数&lt;/h5&gt;

&lt;p&gt;-p 参数用于指定 npx 所要安装的模块，所以上一节的命令可以写成下面这样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx -p node@0.12.8 node -v 
v0.12.8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面命令先指定安装node@0.12.8，然后再执行node -v命令。&lt;/p&gt;

&lt;p&gt;-p参数对于需要安装多个模块的场景很有用。&lt;/p&gt;

&lt;h5 id=&#34;c参数&#34;&gt;-c参数&lt;/h5&gt;

&lt;p&gt;如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx -p lolcatjs -p cowsay &amp;#39;cowsay hello | lolcatjs&amp;#39;
# 报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面代码中，cowsay hello | lolcatjs执行时会报错，原因是第一项cowsay由 npx 解释，而第二项命令localcatjs由 Shell 解释，但是lolcatjs并没有全局安装，所以报错。&lt;/p&gt;

&lt;p&gt;-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx -p lolcatjs -p cowsay -c &amp;#39;cowsay hello | lolcatjs&amp;#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;-c参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，npm 提供当前项目的一些环境变量，可以用下面的命令查看。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm run env | grep npm_&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;-c参数可以把这些 npm 的环境变量带入 npx 命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npx -c &amp;#39;echo &amp;#34;$npm_package_name&amp;#34;&amp;#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面代码会输出当前项目的项目名。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>学习资源</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/basics/</link>
      <pubDate>Fri, 12 Apr 2019 11:03:03 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/basics/</guid>
      
        <description>

&lt;h4 id=&#34;美国伊利诺伊大学算法讲课笔记-英文-偏数学-https-github-com-jeffgerickson-algorithms&#34;&gt;&lt;a href=&#34;https://github.com/jeffgerickson/algorithms/&#34;&gt;美国伊利诺伊大学算法讲课笔记（英文 偏数学）&lt;/a&gt;&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>mac资源汇总</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/mac/</link>
      <pubDate>Fri, 12 Apr 2019 10:50:40 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/mac/</guid>
      
        <description>

&lt;h4 id=&#34;mac软件资源网站-https-xclient-info&#34;&gt;&lt;a href=&#34;https://xclient.info/&#34;&gt;mac软件资源网站&lt;/a&gt;&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>资源汇总</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/tool_resources/</link>
      <pubDate>Fri, 12 Apr 2019 10:50:40 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/tool_resources/</guid>
      
        <description>

&lt;h4 id=&#34;判断某元素是否被浏览器兼容-https-caniuse-com-index&#34;&gt;&lt;a href=&#34;https://caniuse.com/#index&#34;&gt;判断某元素是否被浏览器兼容&lt;/a&gt;&lt;/h4&gt;
</description>
      
    </item>
    
    <item>
      <title>win10_wamp_mysql运行不起来</title>
      <link>https://mmmaxingxing.github.io/post/technology/plugin/win10_wamp_mysql%E8%BF%90%E8%A1%8C%E4%B8%8D%E8%B5%B7%E6%9D%A5/</link>
      <pubDate>Thu, 11 Apr 2019 14:18:39 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/plugin/win10_wamp_mysql%E8%BF%90%E8%A1%8C%E4%B8%8D%E8%B5%B7%E6%9D%A5/</guid>
      
        <description>

&lt;h3 id=&#34;wamp-姜黄色&#34;&gt;wamp 姜黄色&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;1、win + r 调出cmd 输入 services.msc 查看服务中是否有MySQL  
  
2、管理员运行cmd 进入sql目录 运行 mysqld --install

3、net start mysql //启动mysql

4、mysql -u root -p  //登录 mysql 账户

5、mysqld --initialize --user=mysql --console //生成随机密码 初始可不用

6、 SET PASSWORD = PASSWORD(&amp;#39;your new password&amp;#39;); //密码过期 使用控制台登录 创建新密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Call&amp;&amp;Apply谁的效率高</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/callapply/</link>
      <pubDate>Thu, 04 Apr 2019 12:54:18 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/callapply/</guid>
      
        <description>

&lt;h3 id=&#34;call&#34;&gt;Call&lt;/h3&gt;

&lt;p&gt;允许为不同的对象分配和调用属于一个对象的函数/方法。&lt;/p&gt;

&lt;p&gt;call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。&lt;/p&gt;

&lt;p&gt;call接受的是若干个参数的列表，而apply接受的是一个包含多个参数的数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;//使用

function Produce(name,price){
    this.name = name;
    this.price = price;
}

function Food(name,price){
    Produce.call(this,name,price);
    this.category = &amp;#34;food&amp;#34;;
}

console.log(new Food(&amp;#34;cheese&amp;#34;,5).name);
// cheese&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;apply&#34;&gt;Apply&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;func.apply(thisArg, [argsArray])&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;效率君&#34;&gt;效率君&lt;/h3&gt;

&lt;p&gt;call的效率高于apply,因为apply的参数是数组，每次都需要循环。
call的参数则为函数直接需要的参数，个人理解apply是call的更高一级的封装。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>前端技术栈</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</link>
      <pubDate>Wed, 03 Apr 2019 16:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/frontal_resource/</guid>
      
        <description>

&lt;h3 id=&#34;前端必备&#34;&gt;前端必备&lt;/h3&gt;

&lt;h4 id=&#34;正常技术栈&#34;&gt;正常技术栈&lt;/h4&gt;

&lt;h5 id=&#34;es6-http-es6-ruanyifeng-com&#34;&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/&#34;&gt;ES6&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id=&#34;es7&#34;&gt;[ES7]&lt;/h5&gt;

&lt;h5 id=&#34;typescript-http-www-typescriptlang-org&#34;&gt;&lt;a href=&#34;http://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/h5&gt;

&lt;h5 id=&#34;vue&#34;&gt;[Vue]()&lt;/h5&gt;

&lt;h5 id=&#34;react&#34;&gt;[React]()&lt;/h5&gt;

&lt;h5 id=&#34;angular&#34;&gt;[Angular]()&lt;/h5&gt;

&lt;h5 id=&#34;小程序&#34;&gt;[小程序]()&lt;/h5&gt;

&lt;h4 id=&#34;混合app开发&#34;&gt;混合app开发&lt;/h4&gt;

&lt;h5 id=&#34;ionic&#34;&gt;[Ionic]()&lt;/h5&gt;

&lt;h5 id=&#34;reactnative&#34;&gt;[ReactNative]()&lt;/h5&gt;

&lt;h5 id=&#34;crodova-vue&#34;&gt;[Crodova+vue]()&lt;/h5&gt;

&lt;h5 id=&#34;crodova-react&#34;&gt;[Crodova+react]()&lt;/h5&gt;

&lt;h5 id=&#34;weex&#34;&gt;[weex]()&lt;/h5&gt;

&lt;h5 id=&#34;flutter&#34;&gt;[Flutter]()&lt;/h5&gt;

&lt;h4 id=&#34;后台全栈&#34;&gt;后台全栈&lt;/h4&gt;

&lt;h5 id=&#34;nodejs&#34;&gt;[nodejs]()&lt;/h5&gt;

&lt;h5 id=&#34;express-koa&#34;&gt;[Express/Koa]()&lt;/h5&gt;

&lt;h5 id=&#34;tgg-js&#34;&gt;[tgg.js]()&lt;/h5&gt;

&lt;h5 id=&#34;mongodb&#34;&gt;[Mongodb]()&lt;/h5&gt;

&lt;h5 id=&#34;mysql&#34;&gt;[MySql]()&lt;/h5&gt;

&lt;h5 id=&#34;redis&#34;&gt;[Redis]()&lt;/h5&gt;

&lt;h4 id=&#34;电脑软件&#34;&gt;电脑软件&lt;/h4&gt;

&lt;h5 id=&#34;electron&#34;&gt;[Electron]()&lt;/h5&gt;

&lt;p&gt;跨平台混合软件开发&lt;/p&gt;

&lt;h4 id=&#34;其他&#34;&gt;其他&lt;/h4&gt;

&lt;h5 id=&#34;google插件&#34;&gt;[Google插件]()&lt;/h5&gt;

&lt;h5 id=&#34;vscode插件&#34;&gt;[Vscode插件]()&lt;/h5&gt;

&lt;h5 id=&#34;一大波资源-http-www-fly63-com-nav-1016&#34;&gt;&lt;a href=&#34;http://www.fly63.com/nav/1016&#34;&gt;一大波资源&lt;/a&gt;&lt;/h5&gt;
</description>
      
    </item>
    
    <item>
      <title>Golang技术栈程序员技术听说</title>
      <link>https://mmmaxingxing.github.io/post/cours/golang/%E6%B1%9F%E6%B9%96%E4%BC%A0%E9%97%BB%E4%B8%AD%E7%9A%84%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Wed, 03 Apr 2019 14:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/golang/%E6%B1%9F%E6%B9%96%E4%BC%A0%E9%97%BB%E4%B8%AD%E7%9A%84%E6%8A%80%E6%9C%AF/</guid>
      
        <description>

&lt;h4 id=&#34;influxdb&#34;&gt;InfluxDB&lt;/h4&gt;

&lt;p&gt;是一个时间序列数据库，SQL数据库可以提供时序的功能，但严格说时序不是其目的。简而言之，InfluxDB用于存储大量的时间序列数据，并对这些数据进行快速的实时分析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://jasper-zhang1.gitbooks.io/influxdb/content/&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/influxdata/influxdb&#34;&gt;社区&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其他说明：他们的数据采集分析 ,存到了influxdb&lt;/p&gt;

&lt;h4 id=&#34;beego&#34;&gt;Beego&lt;/h4&gt;

&lt;p&gt;goweb框架&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://beego.me/&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其他说明：江湖传闻有些臃肿，某些公司选此为技术栈之后进行了改造&lt;/p&gt;

&lt;h4 id=&#34;goorm&#34;&gt;goOrm&lt;/h4&gt;

&lt;p&gt;Golang写的，开发人员友好的ORM库。做数据库接入的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://gorm.book.jasperxu.com/&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;micro-editor&#34;&gt;micro-editor&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/zyedidia/micro&#34;&gt;一个现代直观的基于终端的文本编辑器&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>javascript细碎tip</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/javascript_small/</link>
      <pubDate>Wed, 03 Apr 2019 14:47:31 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/javascript_small/</guid>
      
        <description>

&lt;h4 id=&#34;debugger&#34;&gt;debugger()&lt;/h4&gt;

&lt;p&gt;断点调试&lt;/p&gt;

&lt;h4 id=&#34;console-dir&#34;&gt;console.dir()&lt;/h4&gt;

&lt;p&gt;打印出元素具体信息&lt;/p&gt;

&lt;h4 id=&#34;console-error&#34;&gt;console.error()&lt;/h4&gt;

&lt;p&gt;打印出错误信息&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>For of 到 Generator</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/for_of%E5%88%B0generator/</link>
      <pubDate>Wed, 03 Apr 2019 13:28:13 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/for_of%E5%88%B0generator/</guid>
      
        <description>

&lt;h3 id=&#34;for-of-是什么&#34;&gt;For of 是什么&lt;/h3&gt;

&lt;p&gt;ES6中引入的for of循环可以用来替代 for in 和 forEach(),并支持新的迭代协议,允许你遍历 Array、Maps(映射)、String、Sets(集合)、Arguments Object 等可迭代的数据结构等。&lt;/p&gt;

&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;var arr = [1,2,3,4]

for(const value of arr){
    console.log(value);
}

//maps 
const iterable = new Map([[&amp;#39;one&amp;#39;, 1], [&amp;#39;two&amp;#39;, 2]]);

for(const [ key, value ] of arr){
    console.log(` key:$[key] and value:$[value] `);
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;注：普通对象不可迭代&lt;/p&gt;

&lt;h5 id=&#34;why&#34;&gt;why???&lt;/h5&gt;

&lt;p&gt;首先我们想一个问题，为什么我们使用  for-of  或者 map（）/ filer（） 方法就可以遍历一个数组 （或者类数组对象: Strings ， Maps ， Sets ， arguments ） 呢？&lt;/p&gt;

&lt;p&gt;站在for-of的角度想一下，如果我们需要遍历一个数组，你需要知道什么信息呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对应下标的值&lt;/li&gt;
&lt;li&gt;是否遍历结束的标志&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;//查看array对象

const newArr = [1,2,3]

console.dir(newArr);

//都存在一个Symbol.iterator

let iterator = nweArr[Symbol.iterator]();

//里面有个next方法

iterator.next();

//下标超出时 value: undefined
//iterator.next(); 每次都返回一个对象，包含两个信息
//对应下标的值 &amp;amp;&amp;amp; 是否遍历结束

以上，印证了之前的猜想&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So Iterator是什么&lt;/p&gt;

&lt;h4 id=&#34;迭代器-iterator-与迭代协议-the-iterator-protocol&#34;&gt;迭代器(iterator)与迭代协议(The iterator protocol)&lt;/h4&gt;

&lt;p&gt;迭代协议:&lt;/p&gt;

&lt;p&gt;The iterator protocol 迭代协议允许 javascript对象去定义或者定制它们的迭代行为，所以上面出现的Symbol.iterator这个方法，就是数组对于这个协议的实现。那么按照这个协议，数组是如何实现了一个iterator呢?&lt;/p&gt;

&lt;p&gt;当需要对一个对象进行迭代时(比如开始一个for of循环),它的@@iterator方法都会在不传参的情况下调用，返回的迭代器用于获取要迭代的值。&lt;/p&gt;

&lt;p&gt;一些内置类型拥有默认的迭代器方法[Array,TypeArray,String,Map,Set],其他类型(Object)则没有。&lt;/p&gt;

&lt;p&gt;可以自定义迭代器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;var myIterable = {}
myIterable[Symbol.iterator] = function* () {
    yield 1;
    yield 2;
    yield 3;
};
[...myIterable] // [1, 2, 3]

//如果一个迭代器没有返回一个迭代器对象，那么它就是一个不符合标准的迭代器
//运行时会抛出异常&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;为什么object中没有迭代器呢&#34;&gt;为什么object中没有迭代器呢？？&lt;/h4&gt;

&lt;p&gt;在很多场景中，我们也需要遍历一个对象，为什么不内置一个迭代器呢？&lt;/p&gt;

&lt;p&gt;我们可以从另一个角度出发，了解一些基本的概念:&lt;/p&gt;

&lt;p&gt;我们常说遍历对象，实在两个程度上对一个js对象进行遍历&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;程序的层级：什么意思呢，在程序的层级上，我们对一个对象进行迭代,是在迭代展示其结构的对象属性。例如：array.prototype.length这个属性与对象的结构相关，但却不是它的数据。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据的层级：意味着迭代数据结构并提取它的数据。例如：我们在迭代一个数组的时候，迭代器是对于它的 每一个数据进行迭代，如array=[a,b,c,d]那么迭代器访问到的是，1，2，3，4。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;js中提供了 for in 方法来遍历所有非Symbol但是可枚举的数据类型。&lt;/p&gt;

&lt;p&gt;如果任性的就是要使用 for of来遍历，则可以使用自定义迭代器的方式呀。[乖巧]&lt;/p&gt;

&lt;p&gt;补充：object 只是对象 万物皆对象，它是最底层的抽象。&lt;/p&gt;

&lt;p&gt;可遍历的对象是 为 具有父子结构的数据而设计的,是比object更高一级的抽象，不适用于所有的object，因此object并没有预制迭代器。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;

&lt;h3 id=&#34;generators&#34;&gt;Generators&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;function* () {};&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在上文迭代器实现中出现过此规则函数。即Generator函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;function* gen(){
    yield 1;
    yield 2;
    yield 3;
    yield 4;
}

//调用
let s = gen();

s.next();

consoel.dir(s);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;由以上见，Generator 可以实例化出一个iterator,并且yield就是用来中断代码执行的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;function* gen（） {
  yield 1;
  yield* gen2（）;
  
return;
}

function* gen2（） {
  yield 4;
  yield 5;
}

let iterator = gen（）;
console.log（iterator.next）;
console.log（iterator.next）;
console.log（iterator.next）;
console.log（iterator.next）;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Generator 可以嵌套 Generator 并且 return 会终极整个Generator;&lt;/p&gt;

&lt;h4 id=&#34;业务场景&#34;&gt;业务场景&lt;/h4&gt;

&lt;p&gt;两个异步函数 A、B , B的参数是A的返回值，也就是说A执行完之后才可以执行B ，由此可在A结束的时候调用 next;&lt;/p&gt;

&lt;p&gt;其他：可参考 co库源码&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>php4.2小记</title>
      <link>https://mmmaxingxing.github.io/post/cours/php/php_4.2/</link>
      <pubDate>Tue, 02 Apr 2019 21:27:10 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/php/php_4.2/</guid>
      
        <description>

&lt;h3 id=&#34;基础使用记录&#34;&gt;基础使用记录&lt;/h3&gt;

&lt;h4 id=&#34;post-变量&#34;&gt;$_POST 变量&lt;/h4&gt;

&lt;p&gt;预定义的 $_POST 变量用于收集来自 method=&amp;ldquo;post&amp;rdquo; 的表单中的值。&lt;/p&gt;

&lt;p&gt;从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。&lt;/p&gt;

&lt;p&gt;注释：然而，默认情况下，POST 方法的发送信息的量最大值为 8 MB（可通过设置 php.ini 文件中的 post_max_size 进行更改）。&lt;/p&gt;

&lt;h4 id=&#34;echo&#34;&gt;echo&lt;/h4&gt;

&lt;p&gt;在浏览器输出文本&lt;/p&gt;

&lt;h4 id=&#34;断点调试&#34;&gt;断点调试&lt;/h4&gt;

&lt;h5 id=&#34;die-exit&#34;&gt;die() &amp;amp;&amp;amp; exit()&lt;/h5&gt;

&lt;p&gt;输出一条信息，并退出当前脚本&lt;/p&gt;

&lt;h5 id=&#34;var-dump-打印变量的相关信息&#34;&gt;var_dump &amp;ndash; 打印变量的相关信息&lt;/h5&gt;

&lt;p&gt;此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。&lt;/p&gt;

&lt;h5 id=&#34;print-r-打印关于变量的易于理解的信息&#34;&gt;print_r &amp;ndash;  打印关于变量的易于理解的信息&lt;/h5&gt;

&lt;p&gt;print_r() 显示关于一个变量的易于理解的信息。如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。&lt;/p&gt;

&lt;h5 id=&#34;file-put-contents-打印到后台文本进行查看&#34;&gt;file_put_contents() 打印到后台文本进行查看&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;file_put_contents(&amp;#34;/test.txt&amp;#34;, var_export($mydata,true).&amp;#34;\r\n&amp;#34;,FILE_APPEND);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;include&#34;&gt;include&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;vars.php

&amp;lt;?php
    $color = &amp;#34;green&amp;#34;
    $fruit = &amp;#34;apple&amp;#34;
?&amp;gt;

test.php

&amp;lt;?php 
    echo &amp;#34;A $color $fruit&amp;#34;; //A

    include vars.php;

    echo &amp;#34;A $color #fruit&amp;#34;; // A green Apple
?&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>资源汇总之后台管理系统</title>
      <link>https://mmmaxingxing.github.io/post/technology/resource/admin-ui/</link>
      <pubDate>Mon, 01 Apr 2019 17:15:23 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/resource/admin-ui/</guid>
      
        <description>

&lt;h3 id=&#34;vue技术栈&#34;&gt;vue技术栈&lt;/h3&gt;

&lt;h4 id=&#34;后台管理系统&#34;&gt;后台管理系统&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/PanJiaChen/vue-element-admin&#34;&gt;vue-element-admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vuetifyjs.com/zh-Hans/getting-started/quick-start&#34;&gt;vuetify&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;正常技术栈&#34;&gt;正常技术栈&lt;/h3&gt;

&lt;h4 id=&#34;后台管理系统-1&#34;&gt;后台管理系统&lt;/h4&gt;

&lt;p&gt;bootstrap:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE&#34;&gt;Admin LTE&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;php-技术栈&#34;&gt;php 技术栈&lt;/h3&gt;

&lt;h4 id=&#34;后台管理系统-2&#34;&gt;后台管理系统&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://www.fastadmin.net/&#34;&gt;fastAdmin&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>nginx 配置 申请</title>
      <link>https://mmmaxingxing.github.io/post/technology/plugin/nginx_conf/</link>
      <pubDate>Sun, 31 Mar 2019 17:15:23 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/technology/plugin/nginx_conf/</guid>
      
        <description>

&lt;h3 id=&#34;反向代理和负载均衡&#34;&gt;反向代理和负载均衡&lt;/h3&gt;

&lt;h4 id=&#34;什么是反向代理&#34;&gt;什么是反向代理&lt;/h4&gt;

&lt;p&gt;当我们有一个服务器集群，并且服务器集群中的每台服务器的内容一样的时候，同样我们要直接从个人电脑访问到服务器集群服务器的时候无法访问，必须通过第三方服务器才能访问集群&lt;/p&gt;

&lt;p&gt;这个时候，我们通过第三方服务器访问服务器集群的内容，但是我们并不知道是哪一台服务器提供的内容，此种代理方式称为反向代理&lt;/p&gt;

&lt;h4 id=&#34;什么是负载均衡&#34;&gt;什么是负载均衡&lt;/h4&gt;

&lt;p&gt;公司会建立很多的服务器，这些服务器组成了服务器集群，然后，当用户访问网站的时候，先访问一个中间服务器，再让这个中间服务器在服务器集群中选择一个压力较小的服务器，然后将该访问请求引入选择的服务器&lt;/p&gt;

&lt;p&gt;所以，用户每次访问，都会保证服务器集群中的每个服务器压力趋于平衡，分担了服务器压力，避免了服务器崩溃的情况&lt;/p&gt;

&lt;p&gt;一句话：nginx会给你分配服务器压力小的去访问&lt;/p&gt;

&lt;h3 id=&#34;nginx-安装&#34;&gt;nginx 安装&lt;/h3&gt;

&lt;p&gt;进入nginx 官网 根据不同环境配置安装&lt;/p&gt;

&lt;p&gt;window 直接下载 运行 即可&lt;/p&gt;

&lt;p&gt;Linux 安装 (回头补)&lt;/p&gt;

&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;nginx //打开运行nginx

nginx -s stop //停止nginx

nginx -s reload //重新运行nginx

ps -ef | grep nginx  // linux 查看 nginx.conf是从哪开始的

find /|grep nginx.conf // linux 查看是否已安装nginx 及其安装路径

nginx -t //检查语法是否正确&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;配置项&#34;&gt;配置项&lt;/h3&gt;

&lt;p&gt;找到 nginx.conf&lt;/p&gt;

&lt;h4 id=&#34;proxy-pass-反向代理配置&#34;&gt;proxy_pass 反向代理配置&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;server {
    listen 80;
    server_name  chd.news.so.m.qss.test.so.com ;
    location / {
        proxy_pass http://10.10.10.10:20186;
    }
    #api server 完全代理
    location /wwwthings {
        proxy_pass http://verify7011;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    
    }
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;负载均衡配置-upstream&#34;&gt;负载均衡配置 Upstream&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ip_hash指令&lt;/li&gt;
&lt;li&gt;server 指令&lt;/li&gt;
&lt;li&gt;upstream 指令以及其相关变量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// 修改nginx.conf
worker_processes 1;
events {
    worker_connections 1024;
}
http {
    upstream firstdemo {
        server 39.106.145.33;
        server 47.93.6.93;
    }
    server {
        listen 8080;
        location / {
            proxy_pass http://firstdemo;
        }
    }
}

//示意
worker_processes
工作进程数，和CPU核数相同
worker_connections
每个进程允许的最大连接数
upstream模块
负载均衡就靠它
语法格式：upstream name {}
里面写的两个server分别对应着不同的服务器
server模块
实现反向代理
listen监督端口号
location / {}访问根路径
proxy_pass http://firstdemo，代理到firstdemo里两个服务器上&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;每次刷新都会访问不同的服务器，这样就做到了负载均衡处理&lt;/p&gt;

&lt;p&gt;不过，更应该做到的是当用户第一次访问到其中一台服务器后，下次再访问的时候就直接访问该台服务器就好了，不用总变化了。那么就发挥了ip_hash的威力了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt; upstream firstdemo {
        ip_hash;
        server 39.106.145.33;
        server 47.93.6.93;
    }&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ip_hash它的作用是如果第一次访问该服务器后就记录，之后再访问都是该服务器了，这样比如第一次访问是33服务器，那之后再访问也会分配为33服务器访问了&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue-Cli兼容IE9</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/vue/vue_inclusive_ie9/</link>
      <pubDate>Sat, 30 Mar 2019 21:07:20 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/vue/vue_inclusive_ie9/</guid>
      
        <description>

&lt;h4 id=&#34;1-meta标签要写好&#34;&gt;1、meta标签要写好&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
  &amp;lt;meta name=&amp;#34;viewport&amp;#34;
    content=&amp;#34;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;#34;&amp;gt;
  &amp;lt;meta name=&amp;#34;renderer&amp;#34; content=&amp;#34;webkit&amp;#34;&amp;gt;
  &amp;lt;meta name=&amp;#34;author&amp;#34; content=&amp;#34;lyadmin&amp;#34;&amp;gt;
  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=Edge,chrome=1&amp;#34;&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;2-编译插件要装好&#34;&gt;2、编译插件要装好&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;npm install babel-polyfill --save-dev&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;3-其他配置要配好&#34;&gt;3、其他配置要配好&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// webpack.base.conf.js
entry: {
    app: [&amp;#39;babel-polyfill&amp;#39;,&amp;#39;./src/main.js&amp;#39;]
  },


  // main.js
  
  import &amp;#39;babel-polyfill&amp;#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>利用Array From 实现分页骚操作</title>
      <link>https://mmmaxingxing.github.io/post/cours/javascript/paging/</link>
      <pubDate>Fri, 29 Mar 2019 15:24:51 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/cours/javascript/paging/</guid>
      
        <description>

&lt;h4 id=&#34;array-form-是什么&#34;&gt;Array.form 是什么&lt;/h4&gt;

&lt;h5 id=&#34;array用于将两类对象转换为真正的数组&#34;&gt;array用于将两类对象转换为真正的数组,&lt;/h5&gt;

&lt;p&gt;即:类似数组的对象(array-likeobject) 和可遍历（iterable）的对象 包括[Set]和[Map]&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;let arrLike = {
    &amp;#34;0&amp;#34;:&amp;#34;a&amp;#34;,
    &amp;#34;1&amp;#34;:&amp;#34;b&amp;#34;,
    &amp;#34;2&amp;#34;:&amp;#34;c&amp;#34;,
    length:3
}

//ES5

let arr1 = [].slice.call(arrLike) //[&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;]

//ES6

let arr2 = Array.from(arrLike) //[&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;实际应用，常见的类似数组的对象是DOM操作返回的NodeList集合，以及函数内部的arguments对象。&lt;/p&gt;

&lt;p&gt;Array.from 都可以将它们转为真正的数组。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;// node list 对象

let ps = document.querySelectorAll(&amp;#34;p&amp;#34;);

Array.from(ps).filter(p =&amp;gt; {
    return p.textContent.length &amp;gt; 100;
})
//转为数组 返回filter 对象

//arguments 对象
function foo (){
    var args = Array.from(arguments);
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;部署了iterator的接口的数据结构-array-from都可以将其转为数组&#34;&gt;部署了Iterator的接口的数据结构，Array.from都可以将其转为数组;&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Array.from(&amp;#39;hello&amp;#39;)
// [&amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;]

let namesSet = new Set([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;])
Array.from(namesSet) // [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;兼容处理&#34;&gt;兼容处理：&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;const toArray = (() =&amp;gt;
  Array.from ? Array.from : obj =&amp;gt; [].slice.call(obj)
)();&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;array-from-的-第二个参数&#34;&gt;array.from 的 第二个参数:&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Array.from([1,2,3],(x) =&amp;gt; x*x);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;用类似于map的方法，对数据进行处理&lt;/p&gt;

&lt;p&gt;如果map函数里面用到了this关键字，还可以传入Array.from的第三个参数，用来绑定this。&lt;/p&gt;

&lt;h5 id=&#34;array-from-的-第一个参数-可以-指定-第二个参数的运行次数&#34;&gt;array.from 的 第一个参数  可以 指定 第二个参数的运行次数&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Array.from({ length: 2 }, () =&amp;gt; &amp;#39;jack&amp;#39;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;其他&#34;&gt;其他：&lt;/h5&gt;

&lt;p&gt;Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。&lt;/p&gt;

&lt;h5 id=&#34;array-from-的兼容性&#34;&gt;array.from 的兼容性&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://mmmaxingxing.github.io/image/plugin_javascript/array.from.jpg&#34; alt=&#34;MDN截图&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;代码实现分页&#34;&gt;代码实现分页&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;const chunk = (arr,size) =&amp;gt;

Array.from({length:Math.ceil(arr.length/size)},(v,i) =&amp;gt; {
    arr.slice( i*size , i*size+size)
});&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      
    </item>
    
  </channel>
</rss>