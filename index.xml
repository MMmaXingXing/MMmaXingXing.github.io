<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Astar Blog</title>
    <link>https://mmmaxingxing.github.io/</link>
    <description>Recent content on Astar Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Feb 2019 16:43:08 +0800</lastBuildDate>
    
        <atom:link href="https://mmmaxingxing.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>依靠github创建自己的博客站点</title>
      <link>https://mmmaxingxing.github.io/post/2019fe/creat_github_blog/</link>
      <pubDate>Fri, 15 Feb 2019 16:43:08 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/2019fe/creat_github_blog/</guid>
      
        <description>

&lt;h2 id=&#34;一-依靠github创建自己的博客文档&#34;&gt;一、依靠github创建自己的博客文档。&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://github-1253441827.cos.ap-shanghai.myqcloud.com/github_blog/creat_githubblog_01.png&#34; alt=&#34;步骤1&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;此步骤网上教程拼接得到-按需调整-放在最后生成上传之后查看是否需要-打包上传从本地测试感觉似乎github有缓存&#34;&gt;此步骤网上教程拼接得到，按需调整（放在最后生成上传之后查看是否需要）打包上传从本地测试感觉似乎github有缓存&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;https://github-1253441827.cos.ap-shanghai.myqcloud.com/github_blog/creat_githubblog_02.png&#34; alt=&#34;步骤2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;电脑上安装-hugo&#34;&gt;电脑上安装 hugo&lt;/h2&gt;

&lt;p&gt;window 平台只需下载一个exe进行安装即可，以下为安装教程&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;https://gohugo.io/getting-started/installing/&lt;/a&gt; （官网教程）&lt;/p&gt;

&lt;h2 id=&#34;用hugo建站&#34;&gt;用hugo建站&lt;/h2&gt;

&lt;h3 id=&#34;1-初始化站点&#34;&gt;1、初始化站点&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
hugo new site blogsname
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-添加一个主题&#34;&gt;2、添加一个主题&lt;/h3&gt;

&lt;p&gt;主题选择 &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add -b master https://github.com/xianmin/hugo-theme-jane.git themes/jane
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;clone好主题以后 将 themes/jane/exampleSite/content 中的内容剪切到 blogsname文件夹下的content中&lt;/p&gt;

&lt;p&gt;将 themes/jane/exampleSite/config.toml 复制到 blogsname文件夹下&lt;/p&gt;

&lt;h3 id=&#34;3-本地测试&#34;&gt;3、本地测试&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行成功后访问 localhost:1313&lt;/p&gt;

&lt;h3 id=&#34;4-打包&#34;&gt;4、打包&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;运行 hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打包后的文件在public中&lt;/p&gt;

&lt;p&gt;将public中的文件上传到第一步创建的.io的项目中，访问 &lt;a href=&#34;https://name.github.io即可&#34;&gt;https://name.github.io即可&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;以上-创建完成&#34;&gt;以上 创建完成&lt;/h4&gt;

&lt;h2 id=&#34;二-借助issues建立评论系统&#34;&gt;二、借助issues建立评论系统&lt;/h2&gt;

&lt;p&gt;借助开源插件 gitment&lt;/p&gt;

&lt;p&gt;引入及安装教程详见官网 &lt;a href=&#34;https://github.com/imsun/gitment&#34;&gt;https://github.com/imsun/gitment&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;1-在博客根目录下运行&#34;&gt;1、在博客根目录下运行&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;npm i --save gitment
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-https-github-com-settings-applications-new-网页申请认证&#34;&gt;2、&lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;https://github.com/settings/applications/new&lt;/a&gt; 网页申请认证&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;Application name:随便写
Homepage URL:这个也可以随意写,就写你的博客地址就行
Application description:描述,也可以随意写
Authorization callback URL:这个必须写你的博客地址
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;3-gitment配置&#34;&gt;3.gitment配置&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;# Gitment
# Introduction: https://imsun.net/posts/gitment-introduction/
gitment:
  enable: true
  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway
  count: true # Show comments count in post meta area
  lazy: false # Comments lazy loading with a button
  cleanly: false # Hide &#39;Powered by ...&#39; on footer, and more
  language: # Force language, or auto switch by theme
  github_user: {you github user id}
  github_repo: 随便写一个你的公开的git仓库就行,到时候评论会作为那个项目的issue
  client_id: {刚才申请的ClientID}
  client_secret: {刚才申请的Client Secret}
  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect
  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;项目实际配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.toml 中

[params.gitment]          # Gitment is a comment system based on GitHub issues. see https://github.com/imsun/gitment 关于git的评论系统
    owner = &amp;quot;MMmaXingXing&amp;quot;              # Your GitHub ID
    repo = &amp;quot;comments&amp;quot;               # The repo to store comments
    clientId = &amp;quot;&amp;quot;           # Your client ID
    clientSecret = &amp;quot;&amp;quot;       # Your client secret
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;4-项目引入&#34;&gt;4、项目引入&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;config.toml 中 手动写入cdn

[params.publicCDN]        # load these files from public cdn                          # 启用公共CDN，需自行定义
    enable = false
    jquery = &#39;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js&amp;quot; integrity=&amp;quot;sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;
    slideout = &#39;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/slideout@1.0.1/dist/slideout.min.js&amp;quot; integrity=&amp;quot;sha256-t+zJ/g8/KXIJMjSVQdnibt4dlaDxc9zXr/9oNPeWqdg=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;
    fancyboxJs = &#39;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.1.20/dist/jquery.fancybox.min.js&amp;quot; integrity=&amp;quot;sha256-XVLffZaxoWfGUEbdzuLi7pwaUJv1cecsQJQqGLe7axY=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;
    fancyboxCss = &#39;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.1.20/dist/jquery.fancybox.min.css&amp;quot; integrity=&amp;quot;sha256-7TyXnr2YU040zfSP+rEcz29ggW4j56/ujTPwjMzyqFY=&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&#39;
    gitmentJS = &#39;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/dist/gitment.browser.min.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;
    gitmentCSS = &#39;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/gitment@0.0.3/style/default.min.css&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;5-出现的问题&#34;&gt;5、出现的问题&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;此项目公共的url证书失效，可以选择换成自己的证书或者换成网上的证书
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>mockjs引入以及使用方式</title>
      <link>https://mmmaxingxing.github.io/post/2019fe/mockjs_bas/</link>
      <pubDate>Tue, 19 Feb 2019 16:08:52 +0800</pubDate>
      
      <guid>https://mmmaxingxing.github.io/post/2019fe/mockjs_bas/</guid>
      
        <description>

&lt;h3 id=&#34;一-mock引入&#34;&gt;一、mock引入&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-script&#34;&gt;1、普通引入 script src 即可
2、vue中使用 
npm install mockjs --dev 
main.js中
import &amp;quot;./mock&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;二-mock-代码相关&#34;&gt;二、mock 代码相关&lt;/h3&gt;

&lt;h5 id=&#34;拦截部分&#34;&gt;拦截部分&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;// 引入mockjs
import Mock from &#39;mockjs&#39;
import loginAPI from &#39;./login&#39;
// import articleAPI from &#39;./article&#39;
// import remoteSearchAPI from &#39;./remoteSearch&#39;
// import transactionAPI from &#39;./transaction&#39;
// 获取 mock.Random 对象
// const Random = Mock.Random;
// // mock一组数据
// const produceNewsData = function() {
//     let articles = [];
//     for (let i = 0; i &amp;lt; 100; i++) {
//         let newArticleObject = {
//             title: Random.csentence(5, 30), //  Random.csentence( min, max )
//             thumbnail_pic_s: Random.dataImage(&#39;300x250&#39;, &#39;mock的图片&#39;), // Random.dataImage( size, text ) 生成一段随机的 Base64 图片编码
//             author_name: Random.cname(), // Random.cname() 随机生成一个常见的中文姓名
//             date: Random.date() + &#39; &#39; + Random.time() // Random.date()指示生成的日期字符串的格式,默认为yyyy-MM-dd；Random.time() 返回一个随机的时间字符串
//         }
//         articles.push(newArticleObject)
//     }

//     return {
//         articles: articles
//     }
// }

// Mock.mock( url, post/get , 返回的数据)；


// 修复在使用 MockJS 情况下，设置 withCredentials = true，且未被拦截的跨域请求丢失 Cookies 的问题
// https://github.com/nuysoft/Mock/issues/300
Mock.XHR.prototype.proxy_send = Mock.XHR.prototype.send
Mock.XHR.prototype.send = function() {
    if (this.custom.xhr) {
        this.custom.xhr.withCredentials = this.withCredentials || false
    }
    this.proxy_send(...arguments)
}

// Mock.setup({
//   timeout: &#39;350-600&#39;
// })


// 登录相关
Mock.mock(/\/login/, &#39;post&#39;, loginAPI.loginByUsername)
Mock.mock(/\/scene\/get_all/, &#39;post&#39;, loginAPI.getcontentListInfo)
    // Mock.mock(/\/login\/logout/, &#39;post&#39;, loginAPI.logout)
    // Mock.mock(/\/user\/info\.*/, &#39;get&#39;, loginAPI.getUserInfo)
export default Mock
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;数据校验部分&#34;&gt;数据校验部分&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;const userMap = {
    admin: {
        data: {
            access_token: &amp;quot;zwLB6rnP6vn5As3R1L2gaZRmPT7bT4th&amp;quot;,
            expire_time: &amp;quot;100000&amp;quot;,
            refresh_token: &amp;quot;jwWw4RmUdngWnczlnsjDVENpJUDIMmzJ&amp;quot;,
        },
        state: true,
    },
}

const contentList = {
    data: [{
        camera_info: [{ camera_no: &amp;quot;camera_5_defalt&amp;quot;, camera_name: &amp;quot;5楼门口&amp;quot;, rmtp_url: &amp;quot;557fe66c52bf4a228a36265ffd4a3c3b&amp;quot; }],
        movie_name: &amp;quot;5楼&amp;quot;,
        movie_no: &amp;quot;floor_5&amp;quot;
    }, {
        camera_info: [{ camera_no: &amp;quot;camera_5_defalt&amp;quot;, camera_name: &amp;quot;5楼门口&amp;quot;, rmtp_url: &amp;quot;557fe66c52bf4a228a36265ffd4a3c3b&amp;quot; }],
        movie_name: &amp;quot;6楼&amp;quot;,
        movie_no: &amp;quot;floor_6&amp;quot;
    }],
    state: true
}

export default {
    loginByUsername: config =&amp;gt; {
        console.log(config)
        console.log(JSON.parse(config.body))
        const { username } = JSON.parse(config.body)
        return userMap[username]
    },
    getcontentListInfo: config =&amp;gt; {
        return contentList
    },
    logout: () =&amp;gt; &#39;success&#39;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>